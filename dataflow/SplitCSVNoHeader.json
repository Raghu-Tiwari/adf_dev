{
	"name": "SplitCSVNoHeader",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "src_billing_header",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "tgt_complex_prerocess_split_files",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "tgt_complex_prerocess_split_files",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "tgt_complex_prerocess_split_files",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "tgt_complex_prerocess_split_files",
						"type": "DatasetReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     skipLines: 3) ~> source1",
				"source1 split(toString(byName('_col0_')) == 'Billiingheader',",
				"     toString(byName('_col0_')) == 'BilliingAddress',",
				"     toString(byName('_col0_')) == 'BilliingItem',",
				"     disjoint: true) ~> split1@(header, Addresses, items, other)",
				"split1@header sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     emptyLinesAsHeader: 3,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          ERROR_FUNCTION('')",
				"     )) ~> sink1",
				"split1@items sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     emptyLinesAsHeader: 3,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"split1@other sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3",
				"split1@Addresses sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink4"
			]
		}
	}
}